// Generated by CoffeeScript 1.7.0

/*
 * jQuery Bifröst v1.0.1
 * http://matiasgagliano.github.com/bifrost/
 *
 * Copyright 2014, Matías Gagliano.
 * Dual licensed under the MIT or GPLv3 licenses.
 * http://opensource.org/licenses/MIT
 * http://opensource.org/licenses/GPL-3.0
 *
 */

(function() {
  "use strict";
  var $, Bifrost, console, iframeId;

  $ = jQuery;

  console = window.console || {
    log: function() {}
  };

  iframeId = 0;

  Bifrost = (function() {
    function Bifrost(options, originalOptions, jqXHR) {
      this.options = options;
      this.originalOptions = originalOptions;
      this.jqXHR = jqXHR;
    }

    Bifrost.prototype.send = function(headers, completeCallback) {
      var clone, clones, data, fileInputs, form, i, iframe, iframeName, meta, name, o, options, pair, value, _i, _j, _len, _len1, _ref, _ref1, _results;
      options = this.options;
      meta = {
        'X-Requested-With': 'IFrame'
      };
      if (options.accepts != null) {
        meta['X-HTTP-Accept'] = options.accepts;
      }
      if ((_ref = options.type) === 'DELETE' || _ref === 'PUT' || _ref === 'PATCH') {
        meta['_method'] = options.type;
        options.type = 'POST';
      }
      iframeId++;
      iframeName = "iframe-transport-" + iframeId;
      iframe = this.iframe = $('<iframe>').css('display', 'none');
      iframe.attr({
        name: iframeName,
        src: 'javascript:false;'
      });
      iframe.appendTo(document.body);
      iframe.one('load', function() {
        var error, response;
        try {
          response = iframe.contents() || $();
          completeCallback(200, 'success', {
            iframe: response
          });
        } catch (_error) {
          error = _error;
          console.log(error);
          completeCallback(403, 'error', {
            iframe: ''
          });
        }
        form.remove();
        iframe.detach();
        return iframe = null;
      });
      form = this.form = $('<form>').css('display', 'none');
      form.prop({
        target: iframeName,
        action: options.url,
        method: options.type
      });
      form.appendTo(document.body);
      data = this.originalOptions.data;
      if ($.isArray(data)) {
        o = {};
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          pair = data[_i];
          _ref1 = [pair.name, pair.value], name = _ref1[0], value = _ref1[1];
          if (o[name] === void 0) {
            o[name] = value;
          } else if ($.isArray(o[name])) {
            o[name].push(value);
          } else {
            o[name] = [o[name], value];
          }
        }
        data = o;
      }
      if(options.sendMeta == true) {
        data = $.extend({}, meta, data);
      } else {
        data = $.extend({}, data);
      }
      for (name in data) {
        value = data[name];
        form.append($('<input>').attr({
          type: 'hidden',
          name: name,
          value: value
        }));
      }
      fileInputs = $(options.fileInputs);
      clones = $();
      if (options.type === 'POST' && fileInputs.length) {
        form.prop({
          enctype: 'multipart/form-data',
          encoding: 'multipart/form-data'
        });
        clones = fileInputs.clone().prop('disabled', true);
        fileInputs.after(function(index) {
          return clones[index];
        });
        form.append(fileInputs);
      }
      form.submit();
      _results = [];
      for (i = _j = 0, _len1 = clones.length; _j < _len1; i = ++_j) {
        clone = clones[i];
        _results.push($(clone).replaceWith(fileInputs[i]));
      }
      return _results;
    };

    Bifrost.prototype.abort = function() {
      if (this.form) {
        this.form.remove();
      }
      if (this.iframe) {
        return this.iframe.off('load');
      }
    };

    return Bifrost;

  })();

  $.ajaxTransport('iframe', function(options, originalOptions, jqXHR) {
    if (options.async) {
      return new Bifrost(options, originalOptions, jqXHR);
    }
  });

  $.ajaxSetup({
    converters: {
      'iframe text': function(content) {
        return content.find('body').text();
      },
      'iframe json': function(content) {
        return $.parseJSON(content.find('body').text());
      },
      'iframe html': function(content) {
        return content.find('body').html();
      },
      'iframe script': function(content) {
        return $.globalEval(content.find('body').text());
      },
      'iframe xml': function(content) {
        var xmlDoc, _ref;
        xmlDoc = content[0];
        if ($.isXMLDoc(xmlDoc)) {
          return xmlDoc;
        }
        return $.parseXML(((_ref = xmlDoc.XMLDocument) != null ? _ref.xml : void 0) || content.find('body').html());
      }
    }
  });

}).call(this);
